{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","components/App.js","index.js"],"names":["Square","onClick","winSquare","value","className","style","color","Board","squares","length","winTrace","Array","fill","map","_","i","j","square","isWinTrace","includes","renderSquare","Game","useState","Math","floor","lastPos","history","setHistory","stepNumber","setStepNumber","xIsNext","setxIsNext","sortType","setSortType","size","setSize","winningQuantity","setWinningQuantity","status","current","winner","calculateWinner","moves","step","move","pos","desc","jumpTo","fontWeight","parseInt","currentHistory","slice","newHistory","concat","handleClick","line","type","onChange","e","target","handleSize","reverse","len","temp","newArr","push","splice","k","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa2106bc.chunk.js","sourcesContent":["export function Square({ onClick, winSquare, value }) {\r\n  return (\r\n    <button className=\"square\" onClick={onClick} style={winSquare ? { color: \"red\" } : null}>\r\n      {value}\r\n    </button>\r\n  );\r\n}\r\n","import { Square } from \"./Square\";\r\n/**\r\n *\r\n * @param {squares} Array[] current squares of the game\r\n * @param {length} int size of rows\r\n * @param {onClick} func callback\r\n * @param {winTrace} Array[] store the index of winning squares\r\n * @returns\r\n */\r\nexport function Board({ squares, length, onClick, winTrace }) {\r\n  function renderSquare(i, winTrace, square, onClick) {\r\n    let isWinTrace = winTrace && winTrace.includes(i) ? true : false;\r\n    return <Square value={square} onClick={() => onClick(i)} key={i} winSquare={isWinTrace} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        // 3. Rewrite Board to use two loops to make the squares instead of hardcoding them.\r\n        [...Array(length)].fill(1).map((_, i) => (\r\n          <div key={i} className=\"board-row\">\r\n            {[...Array(length)]\r\n              .fill(1)\r\n              .map((_, j) => renderSquare(length * i + j, winTrace, squares[length * i + j], onClick))}\r\n          </div>\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n}\r\n","import { React, useState } from \"react\";\r\nimport { Board } from \"./Board\";\r\n\r\nexport function Game() {\r\n  const [history, setHistory] = useState([\r\n    {\r\n      squares: Array(Math.floor(9)).fill(null),\r\n      lastPos: null, // used for recording the new change\r\n    },\r\n  ]);\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xIsNext, setxIsNext] = useState(true); //'X', 'O'\r\n  const [sortType, setSortType] = useState(true); //sort moves, true = ascending\r\n  const [size, setSize] = useState(3); //size of a match\r\n  const [winningQuantity, setWinningQuantity] = useState(3); //the amount of X/O needed to finish the game, autochanging when the size mutates\r\n\r\n  function handleClick(i) {\r\n    const currentHistory = history.slice(0, stepNumber + 1);\r\n    const current = currentHistory[currentHistory.length - 1];\r\n    const squares = current.squares.slice();\r\n    const winner = calculateWinner(squares, size, winningQuantity);\r\n    if (winner || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = xIsNext ? \"X\" : \"O\";\r\n    const newHistory = currentHistory.concat([\r\n      {\r\n        squares: squares,\r\n        lastPos: i,\r\n      },\r\n    ]);\r\n    setHistory(newHistory);\r\n    setStepNumber(currentHistory.length);\r\n    setxIsNext(!xIsNext);\r\n  }\r\n\r\n  function jumpTo(step) {\r\n    setStepNumber(step);\r\n    setxIsNext(step % 2 === 0);\r\n  }\r\n\r\n  function sortMoves() {\r\n    setSortType(!sortType);\r\n  }\r\n\r\n  function handleSize(e) {\r\n    setSize(e.target.value);\r\n    setHistory([\r\n      {\r\n        squares: Array(Math.floor(e.target.value * e.target.value)).fill(null),\r\n        lastPos: null,\r\n      },\r\n    ]);\r\n    setWinningQuantity(e.target.value <= 5 ? e.target.value : 5);\r\n    setStepNumber(0);\r\n    setxIsNext(true);\r\n    setSortType(true);\r\n  }\r\n\r\n  const current = history[stepNumber];\r\n  //console.log(current, history, stepNumber)\r\n  const winner = calculateWinner(current.squares, size, winningQuantity);\r\n  const moves = history.map((step, move) => {\r\n    // 1. Display the location for each move in the format (col, row) in the move history list.\r\n    const pos = step.lastPos;\r\n    const desc = move\r\n      ? \"Go to move (\" + (Math.floor(pos / size) + 1) + \", \" + ((pos % size) + 1) + \")\"\r\n      : \"Go to game start\";\r\n    return (\r\n      // 2. Bold the currently selected item in the move list\r\n      <li key={move}>\r\n        <button onClick={() => jumpTo(move)} style={move === stepNumber ? { fontWeight: \"bold\" } : null}>\r\n          {desc}\r\n        </button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  let status;\r\n  if (winner) {\r\n    status = \"Winner: \" + winner.winner;\r\n    //console.log(winner.line);\r\n  } else if (history.length === size * size + 1 && history.length === stepNumber + 1) {\r\n    // 6. When no one wins, display a message about the result being a draw\r\n    status = \"Draw\";\r\n  } else {\r\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board\r\n          squares={current.squares}\r\n          length={parseInt(size)}\r\n          onClick={(i) => handleClick(i)}\r\n          winTrace={winner && winner.line} //In js, true always evaluates 2nd expression. Ex: false && expression => false\r\n        />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <div>{status}</div>\r\n        <div>\r\n          <span>Size </span>\r\n          <input type=\"number\" value={size} onChange={(e) => handleSize(e)}></input>\r\n        </div>\r\n        <div>\r\n          <button onClick={() => sortMoves()}>Sort {sortType ? \"Ascending\" : \"Descending\"}</button>\r\n        </div>\r\n        <ol>{sortType ? moves : moves.reverse()}</ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction calculateWinner(squares, size, len) {\r\n  //change the shape\r\n  const temp = [...squares];\r\n  const newArr = [];\r\n  for (let _ = 0; _ < size; _++) {\r\n    newArr.push(temp.splice(0, size));\r\n  }\r\n  //console.log(newArr)\r\n  // iterate through row -> col to find winning trace\r\n  for (let i = 0; i < size; i++) {\r\n    for (let j = 0; j < size; j++) {\r\n      // check xlen top straight line, upper right cross, right, lower right cross\r\n      // top\r\n      let line = [];\r\n      for (let k = 0; k < len; k++) {\r\n        if (i - k >= 0) {\r\n          if (newArr[i][j] && newArr[i][j] === newArr[i - k][j]) {\r\n            line.push(size * (i - k) + j);\r\n            if (k === len - 1) return { winner: newArr[i][j], line: line };\r\n            continue;\r\n          } else {\r\n            line = [];\r\n            break;\r\n          }\r\n        } else {\r\n          line = [];\r\n          break;\r\n        }\r\n      }\r\n      // upper right cross\r\n      for (let k = 0; k < len; k++) {\r\n        if (i - k >= 0 && j + k < size) {\r\n          if (newArr[i][j] && newArr[i][j] === newArr[i - k][j + k]) {\r\n            line.push(size * (i - k) + (j + k));\r\n            if (k === len - 1) return { winner: newArr[i][j], line: line };\r\n            continue;\r\n          } else {\r\n            line = [];\r\n            break;\r\n          }\r\n        } else {\r\n          line = [];\r\n          break;\r\n        }\r\n      }\r\n      // right\r\n      for (let k = 0; k < len; k++) {\r\n        if (j + k < size) {\r\n          if (newArr[i][j] && newArr[i][j] === newArr[i][j + k]) {\r\n            line.push(size * i + j + k);\r\n            if (k === len - 1) return { winner: newArr[i][j], line: line };\r\n            continue;\r\n          } else {\r\n            line = [];\r\n            break;\r\n          }\r\n        } else {\r\n          line = [];\r\n          break;\r\n        }\r\n      }\r\n      // lower right cross\r\n      for (let k = 0; k < len; k++) {\r\n        if (i + k < size && j + k < size) {\r\n          if (newArr[i][j] && newArr[i][j] === newArr[i + k][j + k]) {\r\n            line.push(size * (i + k) + (j + k));\r\n            if (k === len - 1) return { winner: newArr[i][j], line: line };\r\n            continue;\r\n          } else break;\r\n        } else break;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n","import { Game } from \"./Game\";\r\n\r\nexport function App() {\r\n  return <Game />;\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}